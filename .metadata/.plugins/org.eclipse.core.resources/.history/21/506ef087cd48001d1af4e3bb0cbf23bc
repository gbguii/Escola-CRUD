package beanView;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import Exception.ShoolException;

public abstract class AbstractBeanView extends Crud {
	
	protected static Scanner sc = new Scanner(System.in);
	
	/**
	 * Retona uma lista todas as opções do sistema no crud.
	 * 
	 * @return uma lista todas as opções do sistema no crud.
	 */
	protected List<String> options() {
		List<String> result = new ArrayList<>();
		result.add("Adicionar");
		result.add("Atualizar");
		result.add("Remover");
		result.add("Voltar");
		return result;
	}
	
	/**
	 * Seleciona a opção de entrada a ser executada.
	 */
	public void selectOption() {
		// Recupera a opção do usuário.
		int option = this.optionSelected();
		// Seleciona a opção.
		this.optionCrud(option);
	}

	/**
	 * Retorna a opção selecionada pelo usuário.
	 * @return a opção selecionada pelo usuário.
	 */
	private int optionSelected() {
		System.out.println("O que deseja fazer? ");
		// Percorre a lista de opções do que se pode fazer.
		for (int i = 0; i < this.options().size(); i++) {
			// Imprime a opção.
			System.out.println(i + 1 + " - " + this.options().get(i));
		}
		System.out.print("Digite a opção: ");
		// Recupera a opção selecionada.
		int result = sc.nextInt();
		System.out.println();
		return result;
	}
	
	/**
	 * Executa a função de crud conforme a opção selecionada
	 * 
	 * @param option opção selecionada.
	 */
	protected void optionCrud(int option) {
		switch (option) {
		// Se for para criar um item.
		case 1:
			this.create();
			break;
		// Se for para ler um item.
		case 2:
			this.update();
			break;
		// Se for para atualizar um item.
		case 3:
			this.update();
			break;
		// Se for para voltar ao menu anterior.
		case 4:
			this.returnMenu();
			break;
		}
	}
	
	/**
	 * Retorna ao menu.
	 */
	protected void returnMenu() {

	}

	/**
	 * Valida se uma string para atributo nome é valida.
	 * 
	 * @param value String de nome.
	 * @return Retorna o nome váido.
	 * @throws ShoolException Em caso valor não ser válido.
	 */
	protected String validateName(String value) throws ShoolException {
		// Verifica se o valor não vazio ou nulo.
		if (value.isEmpty() || value == null || value.trim().isEmpty()) {
			throw new ShoolException("O nome está vazio");
		} else {
			return value;
		}
	}
	
	protected boolean confirmUpdate() {
		boolean result = false;
		Scanner sc = new Scanner(System.in);
		System.out.println("Deseja realizar a atualização? S/N");
		String getIn = sc.next();
		if(getIn.equalsIgnoreCase("s")) {
			result = true;
		}
		sc.close();
		return result;
	}
	
}
