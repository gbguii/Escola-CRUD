package beanView;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import Exception.ShoolException;
import Implementation.StudentImpl;
import obj.StudentObj;

/** Classe do estudante. */
public class ShoolStudentView extends AbstractBeanView {

	// Cria um instancia da classe de implementação.
	private StudentImpl studentImpl = new StudentImpl();
	// Lista de estudantes cadastrados.
	private List<StudentObj> studentList = new ArrayList<>();

	/**
	 * Construtor padrão.
	 */
	public ShoolStudentView() {
		this.loadClass();
		this.init();
	}
	
	/**
	 * Carrega os dados da classe.
	 */
	private void loadClass() {
		try {
			// Recupera os estudantes cadastrados.
			studentList = studentImpl.getStudentList();
			// Em caso de erro.
		} catch (SQLException e) {
			// Lança exceção.
			e.printStackTrace();
		}
	}

	public void init() {
		this.printStudentList();
		this.selectOption();
	}

	/**
	 * Imprime a lista de estudantes.
	 */
	public void printStudentList() {
		if (!this.getStudentList().isEmpty()) {
			for (StudentObj student : this.getStudentList()) {
				System.out.println(student.getId() + " - " + student.getFirstName() + " " + student.getLastName());
			}
		}
	}

	/**
	 * Cria a primeira instância de um estudante.
	 * 
	 * @return Retorna o objeto do estudante.
	 * @throws ShoolException em caso de erro ao criar um estudante.
	 */
	private StudentObj createStudent() throws ShoolException {
		// Cria um objeto de estudante.
		StudentObj student = new StudentObj();
		// Informa ao usuário para digitar o primeiro nome.
		System.out.print("Informe o primeiro nome do estudante: ");
		// Recupera o nome digitado e valida.
		String firstName = this.validateName(sc.next());
		// Informa ao usuário para digitar o último nome.
		System.out.print("\nInforme o sobrenome do estudante: ");
		// Recupera o nome digitado e valida.
		String LastName = this.validateName(sc.next());
		// Define o primeiro nome no objeto.
		student.setFirstName(firstName);
		// Define o ultimo nome no objeto.
		student.setLastName(LastName);
		try {
			studentImpl.create(student);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// Retorna o objeto.
		return student;
	}
	
	/**
	 * Realiza o processo de atualização do estudante.
	 * @param student estudante para atualização.
	 */
	private void updateStudent(StudentObj student) {
		// Imprime o estudante selecionado.
		System.out.println(student.toString());
		// Pede para informar o primeiro nome.
		System.out.print("Digite o primeiro nome: ");
		// Recupera o primeiro nome.
		String firstName = sc.next();
		// Pede para informar o sobrenome.
		System.out.print("\nDigite o sobrenome: ");
		// Recupera o sobrenome.
		String lastName = sc.next();
		// Define o primeiro nome do estudante.
		student.setFirstName(firstName);
		// Define o sobrenome do estudante.
		student.setLastName(lastName);
		// Imprime o usuário atualizado.
		System.out.println("\n" + student.toString());
		// Pede confirmação de atualização.
		boolean isConfirm = this.confirmUpdate();
		// Caso tenha confirmado a atualização.
		if (isConfirm) {
			try {
				// Realiza a atualização.
				this.studentImpl.update(student);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			// Informa ao usuário.
			System.out.println("Atualização realizada!");
		}
	}

	/**
	 * Retorna um estudante pelo id.
	 * 
	 * @return um estudante pelo id.
	 */
	private StudentObj getStudent() {
		// Inicializa o objeto de retorno.
		StudentObj student = new StudentObj();
		// Imprime mensagem.
		System.out.print("Selecione um aluno pelo id: ");
		// Recupera o valor informado.
		Long id = sc.nextLong();
		// Itera pela lista de estudantes cadastrada.
		for (StudentObj studentObj : this.getStudentList()) {
			// Verifica se o id de entrada é igual ao do objeto atual.
			if (studentObj.getId().equals(id)) {
				// estudante de retorno recebe o objeto atual.
				student = studentObj;
			}
		}
		return student;
	}

	/**
	 * Retorna a lista de estudantes.
	 * 
	 * @return a lista de estudantes.
	 */
	public List<StudentObj> getStudentList() {
		return studentList;
	}

	/**
	 * Define a lista de estudantes.
	 * 
	 * @param studentList lista de estudante.
	 */
	public void setStudentList(List<StudentObj> studentList) {
		this.studentList = studentList;
	}

	@Override
	public void create() {
		this.createStudent();
	}

	@Override
	public void read() {
		this.getStudent();
	}

	@Override
	public void update() {
		StudentObj student = this.getStudent();
		this.updateStudent(student);
	}

	@Override
	public void delete() {
		
	}

}
